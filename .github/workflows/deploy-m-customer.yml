name: "CI/CD: Multi-Module Deploy"

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: [feature/#4-nginx]

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      m-customer: ${{ steps.filter.outputs.m-customer }}
      m-common: ${{ steps.filter.outputs.m-common }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            m-customer:
              - 'm-customer/**'
            m-common:
              - 'm-common/**'

  deploy:
    needs: filter
    if: needs.filter.outputs[matrix.module] == 'true'
    strategy:
      matrix:
        include:
          - module: m-customer
            dockerfile_path: m-customer/Dockerfile
            compose_service: m-customer
          - module: m-common
            dockerfile_path: m-common/Dockerfile
            compose_service: m-common
    uses: ./.github/workflows/deploy-reusable.yml
    with:
      module: ${{ matrix.module }}
      dockerfile_path: ${{ matrix.dockerfile_path }}
      compose_service: ${{ matrix.compose_service }}
    secrets:
      ENV_IMAGE_NAME: ${{ secrets.env_image_name }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
      MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
      MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
      SPRING_DATABASE_URL: ${{ secrets.SPRING_DATABASE_URL }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
      EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      S3_REGION: ${{ secrets.S3_REGION }}
      S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
      S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
