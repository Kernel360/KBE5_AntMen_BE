name: "CI/CD: Build & Deploy to EC2"

on:
  push:
    branches: [fix/#22-github-action-A]

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: üõ† Build & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Generate .env from Secrets
        run: |
          cat <<EOF > .env
          PORT=${{ secrets.ENV_PORT }}
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          IMAGE_NAME=${{ secrets.ENV_IMAGE_NAME }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          MYSQL_HOST=${{ secrets.MYSQL_HOST }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_PORT=${{ secrets.MYSQL_PORT }}
          MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}
          SPRING_DATABASE_URL=${{ secrets.SPRING_DATABASE_URL }}
          ECR_REGISTRY=${{ secrets.ECR_REGISTRY }}
          EOF

      - name: Run build.sh
        run: |
          chmod +x ./scripts/build.sh
          ./scripts/build.sh

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag and Push to ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          IMAGE_NAME: ${{ secrets.ENV_IMAGE_NAME }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          docker tag $DOCKER_USERNAME/$IMAGE_NAME:latest $ECR_REGISTRY/$IMAGE_NAME:latest
          docker push $ECR_REGISTRY/$IMAGE_NAME:latest

  deploy:
    name: üöÄ Deploy to EC2
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clear server folder before upload
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            sudo rm -rf ~/apps/server
            mkdir -p ~/apps/server
            sudo chown -R $USER:$USER ~/apps/server

      - name: Copy docker-compose.yml, nginx
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "docker-compose.yml,nginx/nginx.conf,nginx/default.conf"
          target: ~/apps/server

      - name: SSH into EC2 and restart container
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd ~/apps/server
            export PORT=${{ secrets.ENV_PORT }}
            export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            export IMAGE_NAME=${{ secrets.ENV_IMAGE_NAME }}
            export MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            export MYSQL_HOST=${{ secrets.MYSQL_HOST }}
            export MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            export MYSQL_PORT=${{ secrets.MYSQL_PORT }}
            export MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}
            export SPRING_DATABASE_URL="${{ secrets.SPRING_DATABASE_URL }}"

            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY

            docker pull $ECR_REGISTRY/$IMAGE_NAME:latest

            # Ïª®ÌÖåÏù¥ÎÑà Ïû¨ÏãúÏûë
            docker compose down || true
            docker compose up -d || true

            echo "=== Container Status ==="
            docker ps -a || true

            echo "=== App Container Logs ==="
            docker compose logs app || true

            echo "=== DB Container Logs ==="
            docker compose logs db || true

            echo "=== Nginx Container Logs ==="
            docker compose logs nginx || true